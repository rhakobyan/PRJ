INSERT INTO users (email, first_name, last_name, password) VALUES
    ("ruben.hakobyan@kcl.ac.uk", "Ruben", "Hakobyan", "$2a$10$M7pSodU7jpIjfffioigIuO.abhDBT1CNmca3wrXCla2nf9U/YbeEK");

INSERT INTO topic (title, description) VALUES
    ("Introduction", "An introduction to the Java programming language."),
    ("Variables", "Learning how to define variables in Java."),
    ("Operators", "Learning how to use operators in Java."),
    ("Conditional Statements", "Learning how to change the flow of the program using conditional statements."),
    ("Loops", "Learning how to use loops and iterations in Java.");

INSERT INTO lesson (title, explanation, topic_id) VALUES
    ("About Java", "<h5>Welcome to the world of Java!</h5> <p>Java is a very commonly used programming language, and it is often the first language beginners learn.</p> <p>Programming languages enable us to write instructions that a computer can perform. With precise instructions, computers coordinate applications and systems that run the modern world.</p> <p>Just like a regular language, a programming language has a vocabulary and a set of grammatical rules, so that it can communicate with the computer to complete certain tasks.</p> <p>With the Java programming language, software developers can create applications on a computer. What types of applications? This could be web applications, mobile applications, desktop applications, web servers, embedded systems, and more.</p> <p>We call these applications Java programs, because they are built with the Java programming language.</p> <hr> <h4><i class='fa fa-tasks'></i> Task</h4> <hr> <p>On the right panel you can see an actual program written in Java.</p> <p>This program is supposed to print 'Hello World!' in the console below.</p> <p>Try running this program and see what happens!</p>", 1),
    ("Printing statements", "<p>Let’s take a closer look at this instruction from our previous program:</p> <pre class='bg-dark text-white'> <code>System.out.println(\"Hello World\");</code> </pre> <p>Print statements output information to the screen (also referred to as the output terminal).</p> <p>Let’s break this line of code down a little more. Don’t worry if some of the terms here are new to you.</p> <ul> <li><code>System</code> is a built-in Java class that contains useful tools for our programs.</li> <li><code>out</code> is short for “output”.</li> <li><code>println</code> is short for “print line”.</li> </ul> <p>We can use <code>System.out.println()</code> whenever we want the program to create a new line on the screen after outputting a value:</p> <pre class='bg-dark text-white'> <code>System.out.println(\"Hello World\");\n System.out.println(\"Today is a great day to code!\");</code> </pre> <p>After <code>\"Hello World\"</code> is printed, the output terminal creates a new line for the next statement to be outputted. This program will print each statement on a new line like so:</p> <pre class='bg-dark text-white'> <code>Hello World\n Today is a great day to code!</code> </pre> <hr> <h4><i class='fa fa-tasks'></i> Task</h4> <hr> <p>Use the <code>System.out.println()</code> statement to print out <code>\"Learning Java\"</code> inside the output console.</p>", 1),
    ("Data Types", "<p> In computer science, data is information that is stored or processed by a computer. While that might seem fairly abstract, there are many data points we use in everyday life. Your name, your age, the number of apples in your pantry, whether your kitchen light is on or off. These can all be considered pieces of data, and we represent pieces of data in code using <b>data types</b>. </p> <p> Similar to other programming languages, Java classifies different pieces of data with data types based on their value. For example, there's a data type for letters and symbols, and there are various data types for numbers. Ultimately, a data type provides a set of possible values, and if a piece of data is one of these values, it is classified as that specific type. </p> <p> Java separates its data types into two main categories <b>primitive data types</b> and <b>reference types</b>. </p> <p> Primitive data types consist of the most basic data types in the Java language. The most important primitive data types include <code>boolean</code>, <code>int</code> and <code>double</code>.</p> <ul> <li><code>boolean</code> data type represents a true or false value. This means the data piece of whether the kitchen light is on or off could be represented as a Boolean in code.</li> <li><code>int</code> data type, which is short for integer, represents a whole number. The number of siblings you have could be represented in code as an int. You could have zero siblings, three siblings, 10 siblings, any whole number amount of siblings.</li> <li><code>double</code> data type represents a decimal number. With a double, you can represent your GPA, say 3.4, in Java.</li> </ul> <p> There are other primitive types that exist in Java, but these are the most foundational. </p> <hr> <h4><i class='fa fa-tasks'></i> Task</h4> <hr> <p>The code on the right uses data types to represent a person.</p> <p>Try running the code to see information about the person printed.</p>", 2),
    ("Integers", "<p>The first type of data we will store is the whole number. Whole numbers are very common in programming. You often see them used to store ages, or maximum sizes, or the number of times some code has been run, among many other uses. </p> <p> In Java, whole numbers are stored in the <code>int</code> primitive data type. </p> <p> <code>int</code>s hold positive numbers, negative numbers, and zero. They do not store fractions or numbers with decimals in them. </p> <p> The integer data type allows values between -2,147,483,648 and 2,147,483,647, inclusive. </p> <p> To declare a variable of type integer, we use the <code>int</code> keyword before the variable name: </p> <pre class='bg-dark text-white'><code>int yearJavaWasCreated;</code></pre> <p>After declaring an <code>int</code> we can assign a value to it using the <code>=</code> assignment operator, like so: </p> <pre class='bg-dark text-white'><code>yearJavaWasCreated = 1996;</code></pre> <p>It is also possible to declare a variable and assign a value to it together:</p> <pre class='bg-dark text-white'><code>int numberOfPrimitiveTypes = 8;</code></pre> </pre> <hr> <h4><i class='fa fa-tasks'></i> Task</h4> <hr> <p>Declare a variable of type integer that will hold the number of days in a week and print this value.</p>", 2),
    ("Doubles", "<p> Whole numbers don’t accomplish what we need for every program. What if we wanted to store the price of something? We need a decimal point. What if we wanted to store the world’s population? That number would be larger than the int type can hold. </p> <p> The <code>double</code> primitive data type can help. <code>double</code> can hold decimals as well as very large and very small numbers. The maximum value is 1.797,693,134,862,315,7 E+308, which is approximately 17 followed by 307 zeros. The minimum value is 4.9 E-324, which is 324 decimal places! </p> <p> To declare a variable of type double, we use the <code>double</code> keyword in the declaration: </p> <pre class='bg-dark text-white'> <code>double price = 4.99;\n double gdp = 12237700000;</code> </pre> <hr> <h4><i class='fa fa-tasks'></i> Task</h4> <hr> <p>As of February 2021 the Chrome browser is considered to be the most popular web browser, with a usage share of 63.59%.</p> <p>Define a variable <code>googleUsage</code> to represent this percentage and print this variable in the console.</p>", 2),
    ("Booleans", "<p> Often the programs we write face questions that can only be answered with a yes or no. </p> <p> Is the oven on? Is the light green? Did I eat breakfast? </p> <p> These questions are answered with a boolean, a type that references one of two values: <code>true</code> or <code>false</code>. </p> <p> We declare boolean variables by using the keyword <code>boolean</code> before the variable name. </p> <pre class='bg-dark text-white'> <code>boolean javaIsACompiledLanguage = true;\n boolean javaIsACupOfCoffee = false;</code> </pre> <p><code>boolean</code> values help in controlling the flow of the program as we will see in the future lessons.</p> <p> The <code>boolean</code> value is named after the mathematician <a href='https://en.wikipedia.org/wiki/George_Boole'>George Boole</a> who introduced an algebraic system of logic called <a href='https://en.wikipedia.org/wiki/Boolean_algebra'>Boolean Algebra</a>. </p> <hr> <h4><i class='fa fa-tasks'></i> Task</h4> <hr> <p>Make a boolean variable called <code>javaIsAProgrammingLanguage</code> and set it to <code>true</code> if Java is a programming language and <code>false</code> otherwise.</p>", 2),
    ("Chars", "<p> How do we answer questions like: What grade did you get on the test? What letter does your name start with? </p> <p> The <code>char</code> data type can hold any character, like a letter, space, or punctuation mark. </p> <p> It must be surrounded by single quotes, <code>'</code>. </p> <p> For example: </p> <pre class='bg-dark text-white'> <code>char grade = 'B';\n char letter = 's';\n char punctuation = '!';</code> </pre> <p> The <code>char</code> data type can only hold a single character. To store more than a single character, we use the <code>String</code> data type, which we will cover in the next lesson. </p> <hr> <h4><i class='fa fa-tasks'></i> Task</h4> <hr> <p> Define a character variable called <code>firstLetter</code>, set it to the first letter of the English alphabet and print out this variable. </p>", 2),
    ("Strings", "<p> So far, we've learned about a few data types. These data types, <code>int</code>, <code>boolean</code>, <code>double</code>, <code>char</code>, were primitive types. These are great for storing a whole number, <code>true</code>/<code>false</code> values, a single letter or symbol, but what if you wanted to store and reference some text, something that requires more than just a single character? </p> <p> In this lesson, we'll be looking at the second category of Java data types called <b>reference types</b>. And our first reference type is called a <code>String</code>. </p> <p> A <code>String</code> is a sequence of ordered characters. Before, we could represent a single character with a <code>char</code>, but now we can represent a word or a person's name with the <code>String</code> data type. To create a <code>String</code>, we surrounded the series of characters with quotation marks. This represents a <code>String</code> value. To create a string variable, we just state the data type <code>String</code>, give the variable a label, and then use the assignment operator to assign the variable the value, like so: </p> <pre class='bg-dark text-white'> <code>String studentName = \"Mihael Keehl\";</code> </pre> <p> You should note, that unlike primitive data types, when defining a string we write it with a capital letter, as it is a reference type. </p> <p> So what makes a <code>String</code> a reference type? Unlike primitive types, a string is built out of characters. It is not a basic data type. It is created out of organizing <code>char</code> data pieces in an ordered way. The deeper meaning behind reference types, however, is out of the scope of this course. </p> <hr> <h4><i class='fa fa-tasks'></i> Task</h4> <hr> <p>Define a variable called <code>quote</code> and inside the variable, store this quote by Albert Einstein: <code>\"The most beautiful experience we can have is the mysterious\"</code>. </p>", 2),
    ("Arithmetic operators", "<p> Let’s say we are writing a program that represents a user’s bank account. With variables, we know how to store a balance! We would use a double, the primitive type that can hold big decimal numbers. But how would we deposit and withdraw from the account? </p> <p> Lucky for us, we have the ability to manipulate the value of our variables. We can use expressions, arithmetic operators, and more in order to change our variables’ values. </p> <p> For example, Java has built-in arithmetic operations that perform calculations on numeric values: </p> <pre class='bg-dark text-white'> <code>// declare initial balance\n double balance = 20000.99;\n // declare deposit amount\n double depositAmount = 1000.00;\n // store result of calculation in our original variable\n balance = balance + depositAmount;</code> </pre> <p> In the final line of the code above, we used the expression <code>balance + depositAmount</code> to determine the new value of the balance variable. When an expression is executed, it produces a single value. </p> <p> The data type of a variable plays a large role in the operations we can use to manipulate it. We can think of a data type as a combination of a set of values, and a set of operations on those values. For example, the <code>double</code> data type is comprised of values like 4.8 and operations like addition (<code>+</code>). For now, we’ll mainly focus on the set of operations that can be used on numbers and booleans. </p> <p> The data type of an expression is determined by the resulting value. For example, an expression that uses two <code>int</code> values will evaluate to an <code>int</code> value. If an expression contains a <code>double</code> value, then the resulting value will also be of type <code>double</code>. </p> <p>In this lesson, we will learn the following operators that can be performed on <code>int</code>s and <code>double</code>s: </p> <ul> <li>Addition (<code>+</code>) - can be used to add two values together</li> <li>Subtraction (<code>-</code>) - can be used to subtract one value from another</li> <li>Multiplication (<code>*</code>) - can be used to multiply two values together</li> <li>Division (<code>/</code>) - can be used to divide one value by another</li> </ul> <p> For example, if we know that a person was born in the year 1997 and the current year is 2021, we can use the subtraction operator to calculate the age of the person. </p> <pre class='bg-dark text-white'> <code>int yearBorn = 1997;\n int currentYear = 2021;\n int age = currentYear - yearBorn;</code> </pre> <p> Note that we can also use arithmetic operators on values as well, for example: </p> <pre class='bg-dark text-white'><code>double value = 12.2 * 13.4;</code></pre> <p> There other operators available, such as the modulo <code>%</code> operator, but we will not cover these in this course. </p> <hr> <h4><i class='fa fa-tasks'></i> Task</h4> <hr> <p> In the code editor, there is a variable called <code>subtotal</code>, which represents the subtotal of an amount to pay on a bill, and a variable called <code>tax</code>, which represents the amount of tax added to the subtotal. </p> <p> Create a variable, <code>total</code>, that holds subtotal plus the product of subtotal and tax. </p> <p> There were 4 people who bought this meal together and want to split the cost. Create a variable called <code>perPerson</code> that holds total divided by 4. </p> <p> Print out these two variables. </p>", 3),
    ("String concatenation", "<p> We have so far covered some of the arithmetic expressions used in Java. Most of these only work on primitive data types, but some work on Strings too! </p> <p> Let’s say we want to print out a variable, and we want to describe it as we print it out. For example, we are developing a bank system, and we want to print the username of the user like, so: </p> <pre class='bg-dark text-white'><code>Your username is: &lt;username&gt;</code></pre> <p>With the value of the variable username displayed.</p> <p> The <code>+</code> operator, which we used for adding numbers together, can be used to concatenate Strings. In other words, we can use it to join two Strings together! </p> <pre class='bg-dark text-white'> <code>String username = \"JohnDoe\";\n System.out.println(\"Your username is: \" + username);</code> </pre> <p>This code will print:</p> <pre class='bg-dark text-white'><code>Your username is: JohnDoe</code></pre> <p> We can even use a primitive datatype as the second variable to concatenate, and Java will intelligently make it a String first: </p> <pre class='bg-dark text-white'> <code>int balance = 10000;\n String message = \"Your balance is: \" + balance;\n System.out.println(message);</code> </pre> <p>This code will print:</p> <pre class='bg-dark text-white'><code>Your balance is: 10000</code></pre> <hr> <h4><i class='fa fa-tasks'></i> Task</h4> <hr> <p>Image we are in a library which has numerous rooms. Use string concatenation to print out the room number and the number of students studying in it, in the following way:</p> <pre class='bg-dark text-white'><code>There are &lt;numberOfStudents&gt; students in &lt;room&gt;</code></pre> <p>For example, if there are 14 students in room 5, it should print out</p> <pre class='bg-dark text-white'><code>There are 14 student in room 5</code></pre> <p> Store the result in a variable  called <code>roomDescription</code> and print out the result.</p>", 3),
    ("Comparison operators", "<p> Imagine we want to write a bank account program that will handle withdrawals from the bank account. When withdrawing a sum, we want to make sure that we’re withdrawing less money than what the account has available. </p> <p> Java has relational operators for numeric data types that make <code>boolean</code> comparisons which help us solve problems like the withdrawal problem. </p> <p> Java has the following comparison operators available: </p> <ul> <li>Greater <code>></code> operator - checks if one value is greater than another</li> <li>Less than <code><</code> operator - checks if one value is less than another</li> <li>Greater than or equal <code>>=</code> operator - checks if one value is greater than or equal to another</li> <li>Less than or equal <code><=</code> operator - checks if one value is less than or equal than another</li> <li>Equals <code>==</code> operator - checks if one value eqauls to another value</li> <li>Not equals <code>!=</code> operator - checks if one does not equal another</li> </ul> <p> For our withdrawal problem, we could write a code like this. </p> <pre class='bg-dark text-white'> <code>double balance = 20000.01;\n double amountToWithdraw = 5000.01;\n System.out.print(amountToWithdraw < balance);</code> </pre> <p>This will print true, since amountToWithdraw is less than balance</p> <p>Generally, this comparison operators produce a <code>boolean</code> value <code>true</code> or <code>false</code> and we can easily store this this in a <code>boolean</code> variable.</p> <pre class='bg-dark text-white'> <code>int songsInAlbumA = 8;\n int songsInAlbumB = 9;\n boolean sameNumberOfSongs = (songsInAlbumA == songsInAlbumB);\n System.out.print(sameNumberOfSongs);</code> </pre> <p> As the number of songs in album A does not equal the number of songs in album B the variable <code>sameNumberOfSongs</code> will store the value <code>false</code> and this is what will be printed out. </p> <hr> <h4><i class='fa fa-tasks'></i> Task</h4> <hr> <p>You are completing a challenge of waling the recommended amount of steps on a day. Use a comparison operator to check if you have walked the recommended amount of steps on that day.</p> <p>Store the result in a variable called <code>recommendedStepsWalked</code> and print it out.</p>", 3),
    (".equals()", "<p> So far, we have been mainly using operations on primitive types. It does not make much sense to multiply <code>String</code>s, or see if one <code>String</code> is less than the other. But what if we had two users logging into a site, and we wanted to see if their usernames were the same? </p> <p> With reference data types, such as <code>String</code>s, we can’t use the primitive equality operator. To test equality with objects, we use a built-in method called <code>.equals()</code>. When comparing objects, make sure to always use <code>.equals()</code>. <code>==</code> will work occasionally, but the reason why it sometimes works has to do with how objects are stored in memory. So always remember to use <code>.equals()</code> instead of <code>==</code> when working with <code>String</code>s. </p> <p> To use it, we call it on one <code>String</code>, and pass in the <code>String</code> to compare against in parentheses: </p> <pre class='bg-dark text-white'> <code>String name1 = \"Nicholas\";\n String name2 = \"Nick\";\n String name3 = \"Nicholas\";\n \n System.out.println(name1.equals(name2));\n System.out.println(name1.equals(name3));</code> </pre> <p>The first print statement will print out <code>false</code> as <code>\"Nicholas\"</code> is not the same as <code>\"Nick\"</code>, but the second print statement will print out <code>true</code> as these two values are the same.</p> <hr> <h4><i class='fa fa-tasks'></i> Task</h4> <hr> <p>In the code editor you have two <code>String</code> variables, check if these two are the same and print out the result.</p>", 3),
    ("If-Then Statement", "<p> In this lesson we will start learning about how to amend the <b>control flow</b> of our programs. But first, what is a control flow? </p> <p> A program's control flow is the order in which the program's instructions are executed. All of the programs we've looked at so far execute one statement after the other. We created a variable, then printed the variable. Or we created one variable and then another variable and then printed them both. Each line of code was executed <u>sequentially</u>. </p> <p> We can manipulate, which line of code is executed with special <b>control flow statements</b> and <b>conditions</b>. With these control flow statements a line of code might never be executed, it might be executed once or it might be executed multiple times. The conditions determine how many times, if at all, a given line of code is executed. </p> <p> The first conditional statement that we will learn is the <b>If-Then</b> statement. </p> <p> The <code>if-then</code> statement is the most simple control flow we can write. It tests an expression for truth and executes some code based on it. </p> <p>The <code>if-then</code> statement has the following structure:</p> <pre class='bg-dark text-white''> <code>if (condition) {\n &nbsp;&nbsp;&nbsp;&nbsp;expression\n }</code> </pre> <ul> <li>The <code>if</code> keyword marks the beginning of the conditional statement, followed by parentheses <code>()</code>.</li> <li>The parentheses hold a <code>boolean</code> condition. For the condition in parentheses we can use variables that reference a <code>boolean</code>, or comparisons that evaluate to a <code>boolean</code>. </li> <li> The <code>boolean</code> condition is followed by opening and closing curly braces that mark a block of code. This block runs <u>if, and only if</u> the <code>boolean</code> evaluates to <code>true</code>. </ul> <p>The following statements are all examples of correctly written <code>if-then</code> conditional statement</p> <pre class='bg-dark text-white'> <code>if (side == 1) {\n &nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"Heads!\");\n }</code> </pre> <pre class='bg-dark text-white'> <code>boolean isValidPassword = true;\n \n if (isValidPassword) {\n &nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"Password accepted!\");\n }</code> </pre> <p><code>\"Password accepted!\"</code> gets printed.</p> <pre class='bg-dark text-white'> <code>int numberOfItemsInCart = 9;\n \n if (numberOfItemsInCart > 12) {\n &nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"Express checkout not available\");\n }</code> </pre> <p>Nothing gets printed here.</p> <p>If a conditional is brief we can omit the curly braces entirely:</p> <pre class='bg-dark text-white'><code>if (true) System.out.println(\"This will always get printed!\");</code></pre> <hr> <h4><i class='fa fa-tasks'></i> Task</h4> <hr> <p> Imagine you are writing a system that checks the grades of students. </p> <p> Write an <code>if</code> statement that will print out <code>\"Student passed\"</code> if the student has scored 40 or more in their final year test. </p>", 4),
    ("If-Then-Else Statement", "<p> We’ve seen how to conditionally execute one block of code, but what if there are two possible blocks of code we’d like to execute? </p> <p> Let’s say <code>if</code> a student has the required prerequisite, then they enroll in the selected course, <code>else</code> they’re enrolled in the prerequisite course instead. </p> <p> We create an alternate conditional branch with the <code>else</code> keyword: </p> <pre class='bg-dark text-white'><code>if (hasPrerequisite) {\n &nbsp;&nbsp;&nbsp;&nbsp;// Enroll in course \n } else { \n &nbsp;&nbsp;&nbsp;&nbsp;// Enroll in prerequisite \n }</code> </pre> <p> This conditional statement ensures that exactly one code block will be run. If the condition, <code>hasPrerequisite</code>, is <code>false</code>, the block after else runs. </p> <p> There are now two separate code blocks in our conditional statement. The first block runs if the condition evaluates to <code>true</code>, the second block runs if the condition evaluates to <code>false</code>. </p> <hr> <h4><i class='fa fa-tasks'></i> Task</h4> <hr> <p>Imagine you are making a system for booking airplane tickets. Before making a booking a person checks with the system if there are any available tickets.</p> <p>Write a program that will print out <code>\"Tickets available!\"</code> if there are tickets available, otherwise print out <code>\"Tickets unavailable!\"</code></p>", 4),
    ("If-Then-Else-If Statement", "<p> The conditional structure we’ve learned can be chained together to check as many conditions as are required by our program. </p> <p> Imagine our program is now selecting the appropriate course for a student. We’ll check their submission to find the correct course enrollment. </p> <p> The conditional statement now has <u>multiple</u> conditions that are evaluated from the top down: </p> <pre class='bg-dark text-white'> <code>String course = \"Computer Science\";\n \n if (course.equals(\"Biology\")) {\n &nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"You have enrolled in the Biology course!\");\n } else if (course.equals(\"Physics\")) {\n &nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"You have enrolled in the Physics course!\");\n } else if (course.equals(\"Computer Science\")) {\n &nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"You have enrolled in the Computer Science course!\");\n } else {\n &nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"The course you selected could not be found!\");\n }</code> </pre> <p> The <u>first</u> condition to evaluate to <code>true</code> will have that code block run. </p> <p> It is also possible that more than one condition will evaluate to true. In this case, the <u>first</u> condition that evaluates to true will be run, and others will be ignored. For example: </p> <pre class='bg-dark text-white'> <code>int age = 34;\n \n if (age > 18) {\n &nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"You are older than 18.\");\n } else if (age > 25) {\n &nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"You are older than 25.\");\n } else if (age > 50) {\n &nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"You are older than 50.\");\n }</code> </pre> <p> In this scenario, even though the <code>age</code> is greater than both 18 and 25 only <code>\"You are older than 18.\"</code> will get printed out, as this is the first condition. </p> <p>Also note that the <code>if-else-if</code> statement does not have to end with an <code>else</code> statement</p> <hr> <h4><i class='fa fa-tasks'></i> Task</h4> <hr> <p>Imagine you are writing a system that translates number grades to letter grades. Depending on the conditions specified below you need to print out the appropriate letter grade.</p> <ul> <li>score >= 70: A</li> <li>score >= 60: B</li> <li>score >= 50: C</li> <li>score >= 40: D</li> <li>score < 40:  U</li> </ul>", 4),
    ("Switch Statement", "<p> An alternative to chaining <code>if-then-else</code> conditions together is to use the <code>switch</code> statement. This conditional will check a given value against any number of conditions and run the code block where there is a match. </p> Here’s an example of the course selection code in the previous lesson using the <code>switch</code> statement: <pre class='bg-dark text-white'> <code>String course = \"Physics\";\n \n switch (course) {\n &nbsp;&nbsp;&nbsp;&nbsp;case \"Biology\":\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"You have enrolled in the Biology course!\");\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;\n &nbsp;&nbsp;&nbsp;&nbsp;case \"Physics\":\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"You have enrolled in the Physics course!\");\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;\n &nbsp;&nbsp;&nbsp;&nbsp;case \"Computer Science\":\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"You have enrolled in the Computer Science course!\");\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;\n &nbsp;&nbsp;&nbsp;&nbsp;default:\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"The course you selected could not be found.\");\n }</code> </pre> <p> This example enrolls the student in Physics class by checking the value contained in the parentheses, course, against each of the case labels. If the value after the <code>case</code> label matches the value within the parentheses, the <code>switch</code> block is run. </p> <p> When no value matches, the default block runs. You can think of this as the <code>else</code> equivalent. </p> <p> <code>Switch</code> blocks are different than other code blocks because they are not marked by curly braces and we use the <code>break</code> keyword to exit the <code>switch</code> statement. </p> <p> Without <code>break</code>, code below the matching <code>case</code> label is run, including code under other <code>case</code> labels, which is rarely the desired behavior. </p> <pre class='bg-dark text-white'> <code>String course = \"Biology\";\n \n switch (course) {\n &nbsp;&nbsp;&nbsp;&nbsp;case \"Biology\":\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"You have enrolled in the Biology course!\");\n &nbsp;&nbsp;&nbsp;&nbsp;case \"Physics\":\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"You have enrolled in the Physics course!\");\n &nbsp;&nbsp;&nbsp;&nbsp;case \"Computer Science\":\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"You have enrolled in the Computer Science course!\");\n &nbsp;&nbsp;&nbsp;&nbsp;default:\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"The course you selected could not be found.\");\n }</code> </pre> <p> This code will enroll the student in the Biology course <b>AND</b> the Physics course <b>AND</b> the Computer Science course! </p> <hr> <h4><i class='fa fa-tasks'></i> Task</h4> <hr> <p> You are implementing a program for an online retailer. </p> <p> Depending on the order size, the program should obtain the appropriate shipping cost, according to the following rules: </p> <ul> <li>Order size >= 5: £1.99</li> <li>Order size >= 10: £2.99</li> <li>Order size >= 15: £3.99</li> <li>Default cost for items less than 5: £0</li> </ul> <p> Define a variable named <code>shippingCost</code> and store the appropriate value in it using the <code>switch</code> statement. </p> <p> After the switch statement has executed, print out the shipping cost in the following way: </p> <pre class='bg-dark text-white'>Your shipping cost is £&lt;shippingCost></pre>", 4),
    ("Logical Operators","<p> Java includes operators that only use boolean values. These conditional operators help simplify expressions containing complex boolean relationships by reducing multiple boolean values to a single value: <code>true</code> or <code>false</code>. </p> <p> For example, what if we want to run a code block only if <u>multiple</u> conditions are <code>true</code>. We could use the <b>AND</b> operator: <code>&&</code>. </p> <p> Or, we want to run a code block if <u>at least one</u> of two conditions are <code>true</code>. We could use the <b>OR</b> operator:  <code>||</code>. </p> <p> Finally, we can produce the opposite value, where <code>true</code> becomes <code>false</code> and <code>false</code> becomes <code>true</code>, with the <b>NOT</b> operator: <code>!</code>. </p> <p> Let's say we have two variables: <code>int x = 5;</code> and  <code>int y = 10;</code>. Here's what will happen if we apply our logical operators: </p> <table class='table'> <thead> <tr> <th scope='col'>Operator</th> <th scope='col'>Name</th> <th scope='col'>Example</th> <th scope='col'>Output</th> </tr> </thead> <tbody> <tr> <th scope='row'>&&</th> <td>AND</td> <td><code>(x > 5 && y == 10)</code></td> <td><code>false</code></td> </tr> <tr> <th scope='row'>||</th> <td>OR</td> <td><code>(x >= 4 || y < 7)</code></td> <td><code>true</code></td> </tr> <tr> <th scope='row'>!</th> <td>NOT</td> <td><code>!(x == y)</code></td> <td><code>true</code></td> </tr> </tbody> </table> <hr> <h4><i class='fa fa-tasks'></i> Task</h4> <hr> <p>Imagine you are writing code for an online payment system.</p> <p>In your code, you need to check that the user's card has not expired and that they have enough money on their card.</p> <p>If the above conditions evaluate to true, print out <code>\"Payment successful\"</code>, otherwise print out <code>\"Payment cancelled\"</code>.</p>",4),
    ("While Loop", "<p> Conditional statements are not the only way we can add decision making to our programs. We also have <b>loops</b>. A loop is similar to a conditional statement, except that it allows code to be executed repeatedly, based on a <code>boolean</code> condition, instead of just one time. </p> <p> There are several different types of loops in Java, In this lesson we will learn about the <code>while</code> loop. A <code>while</code> loop looks like this: </p> <pre class='bg-dark text-white'> <code>while (condition) {\n &nbsp;&nbsp;&nbsp;&nbsp;do something\n }</code> </pre> <p> We start the loop by specifying the <code>while</code> keyword. Then we check for a <code>boolean</code> condition inside the parentheses. If the condition evaluates to <code>true</code>, we execute the body of the loop, and then check the condition again. </p> <p> If the next time that condition evaluates to <code>false</code>, we exit the loop, and continue to the rest of the code. </p> <p> On your smartphone, you've probably listened to music, and if you find a song you like, you put it on repeat. When a song is on repeat, it plays over and over again until you take it off repeat. We can represent this type of functionality in a Java program using loops. </p> <p> Let's imagine we are writing a login system that will check if the specified password is correct. In order to prevent malicious users from trying to guess the password using several combinations, we would need to limit the amount of attempts that a user can make when trying to login, after which the user account will be locked. </p> <p> The said functionality can be implemented using a while loop: </p> <pre class='bg-dark text-white'> int attempts = 0;\n String enteredPassword = \"password\";\n String actualPassword = \"goodPassword123\";\n \n <code>while (!enteredPassword.equals(actualPassword) && attempts < 5) {\n &nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"Try again\");\n &nbsp;&nbsp;&nbsp;&nbsp;attempts++;\n }</code> <p>Note, that we are using <code>attempts++;</code> here. The <code>++</code> operator is called the post increment operator and is essentially equivalent to <code>attempts += attempts + 1;</code>. The <code>-</code> operator has its analogous version called post-decrement <code>attempts--;</code></p> </pre> <hr> <h4><i class='fa fa-tasks'></i> Task</h4> <hr> <p> Imagine,you are writing code for a thermostat logic. </p> <p> Using a <code>while</code> loop the code should check if the current temperature is less than the threshold and increase the temperature until the threshold is reached. </p> <p> After the threshold is reached, print out <code>\"The room is warm enough\"</code> </p>", 5),
    ("Do-While Loop", "<p> A <code>do-while</code> loop is essentially a <code>while</code> loop, however, instead of checking for a boolean condition first and then executing a series of expressions, it first executes the expressions and then checks for the condition. </p> <p> This loop will always be executed <u>at least once</u>, even if the condition is <code>false</code>, because the expression is executed before the condition is tested. </p> <p> The <code>do-while</code> loop has the following structure: </p> <pre class='bg-dark text-white'> <code>int counter = 10; \n \n do {\n &nbsp;&nbsp;&nbsp;&nbsp;counter--;\n } while (counter > 15); </code> </pre> <p> Note the semi-colon <code>;</code> after the end of the <code>while</code> statement </p> <p> In this example, even though counter is already less than 15, this loop will still execute once. </p> <hr> <h4><i class='fa fa-tasks'></i> Task</h4> <hr> <p> Starting from index 0, using a <code>do-while</code> loop print the value of the index and increase its value, until the index reaches 10. </p>", 5),
    ("For Loop", "<p> As you have seen in previous examples, it is quite common to use loops for incrementing a variable. To make incrementation more understandable a special loop called a <code>for</code> loop was created. </p> <p> A <code>for</code> loop header is made up of the following three parts, each separated by a semicolon <code>;</code> </p> <ul> <li>The <u>initialization</u> of the loop control variable.</li> <li>A <code>boolean</code> expression.</li> <li>An <u>increment</u> or <u>decrement</u> statement.</li> </ul> <p>The opening line might look like this:</p> <pre class='bg-dark text-white'> <code>for (int i = 0; i < 5; i++) {\n &nbsp;&nbsp;&nbsp;&nbsp;// code that will run\n }</code> </pre> <p> In a <code>for</code> loop, an initialization statement is run once in order to initialize the loop control variable. This variable is modified in every iteration, can be referenced in the loop body, and used to test the <code>boolean</code> condition. In the example above, <code>i</code> is the loop control variable. </p> <p> Let’s breakdown our example: </p> <ul> <li><code>i = 0</code>: <code>i</code> is initialized to 0</li> <li><code>i < 5</code>: the loop is given a <code>boolean</code> condition that relies on the value of <code>i</code>. The loop will continue to execute until <code>i < 5</code> is <code>false</code>.</li> <li><code>i++</code>: <code>i</code> will increment at the end of each loop and before the condition is re-evaluated.</li> </ul> <p> So the code will run through the loop a total of five times.</p> <p> We’ll also use the term <code>iteration</code> in reference to loops. When we iterate, it just means that we are repeating the same block of code. </p> <hr> <h4><i class='fa fa-tasks'></i> Task</h4> <hr> <p>Translate the following <code>while</code> loop into a <code>for</code> loop</p> <pre class='bg-dark text-white'> <code>int i = 0;\n int twoProduct = 1;\n \n &nbsp;&nbsp;&nbsp;&nbsp;while (i < 5) {\n &nbsp;&nbsp;&nbsp;&nbsp;twoProduct *= 2;\n &nbsp;&nbsp;&nbsp;&nbsp;i++;\n }\n System.out.println(twoProduct);</code> </pre>", 5);

INSERT INTO problem (problem_file, solution_start_index, solution_end_length, lesson_id) VALUES
    ("problems/Problem1.java", 4, 2, 1),
    ("problems/problem2.java", 5, 2, 2),
    ("problems/problem3.java", 4, 2, 3),
    ("problems/problem4.java", 4, 2, 4),
    ("problems/problem5.java", 4, 2, 5),
    ("problems/problem6.java", 4, 2, 6),
    ("problems/problem7.java", 4, 2, 7),
    ("problems/problem8.java", 4, 2, 8),
    ("problems/problem9.java", 4, 2, 9),
    ("problems/problem10.java", 4, 2, 10),
    ("problems/problem11.java", 4, 2, 11),
    ("problems/problem12.java", 4, 2, 12),
    ("problems/problem13.java", 4, 2, 13),
    ("problems/problem14.java", 4, 2, 14),
    ("problems/problem15.java", 4, 2, 15),
    ("problems/problem16.java", 4, 2, 16),
    ("problems/problem17.java", 4, 2, 17),
    ("problems/problem18.java", 4, 2, 18),
    ("problems/problem19.java", 4, 2, 19),
    ("problems/problem20.java", 4, 2, 20);

INSERT INTO solution (solution_file, problem_id) VALUES
    ("solutions/problem2-solution1.java", 2);